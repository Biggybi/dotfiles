#!/bin/bash
#links files from FILES to their provided LINK

GITURL=https://github.com/Biggybi/dotfiles
SRC=$HOME/dotfiles
DST=$HOME
BACKUP=$HOME/dotfiles/dots_back

# git files to link
FILES=(vim
	vimrc
	bashrc
	bash_aliases
	inputrc
	bin
	git_template
	fonts
	zhsrc)

# links to create localy for Linux
LINK=(.vim
	.vimrc
	.bashrc
	.bash_aliases
	.inputrc
	bin
	.git_template
	.fonts
	"")

# links to create localy for Mac
if [[ "$OSTYPE" == "darwin"* ]]
then
	LINK=(vim
		.vimrc
		.bashrc
		.bash_aliases
		.inputrc
		bin
		.git_template
		.fonts
		.zshrc)
fi

if [ -d "$SRC" ]
then
	echo "Not cloning : $SRC exists"
else
	git clone $GITURL $SRC
fi

if [ "$1" == "--git" ] || [ "$1" == "-g" ] || [ "$1" == "--plugins" ]
then
	echo "Cloning plugins"
	cd "${LINK[0]}"
	git submodule init
	git submodule update
else
	echo "Plugin already installed"
fi

i=0
while [ -d "$BACKUP" ] && [ ! -f "$BACKUP/.dots_back" ]
do
	let i=i+1
	echo "$BACKUP exists, new backup dir"
	BACKUP="$BACKUP$i"
	echo "$BACKUP new backup dir"
done
[ ! -d "$BACKUP" ] && mkdir "$BACKUP"
mv "$DST/$l" "$BACKUP/$l"

i=0
for f in "${FILES[@]}"
do
	l="${LINK[i]}"
	echo "$i $l"
	if [ -e "$SRC/$f" ]
	then
		if [ -L "$DST/$l" ]
		then
			echo "link deleted : $l"
			#rm $DST/$l
		elif [ -f "$DST/$l" ]
		then
			echo "file saved : $BACKUP $l"
		elif [ -d "$DST/$l" ]
		then
			echo "file saved : $BACKUP $l"
		fi
		[ ! -d $DST/$l ] && ln -fs "$SRC/$f" "$DST/$l"
		echo "link created : $l -> $f "
	else
		echo "no such file : $l"
	fi
	let i=i+1
done

echo "$BACKUP"

[ -d "$BACKUP" ] && touch "$BACKUP/.dots_back"
