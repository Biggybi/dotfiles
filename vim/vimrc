" **************************************************************************** "
"                                                                              "
"                                                         :::      ::::::::    "
"    vimrc                                              :+:      :+:    :+:    "
"                                                     +:+ +:+         +:+      "
"    By: tris <tris@tristankapous.com>              +#+  +:+       +#+         "
"                                                 +#+#+#+#+#+   +#+            "
"    Created: 2016/04/14 18:58:30 by tris              #+#    #+#              "
"    Updated: 2020/07/27 06:01:36 by tris             ###   ########lyon.fr    "
"                                                                              "
" **************************************************************************** "

""    Settings
"""        General settings

augroup ZshEnv
  if $SHELL =~# '.*zsh'
    autocmd VimEnter * ++once
          \ let &shell='/bin/zsh -i'
  endif
  if $SHELL =~# '.*bash'
    autocmd VimEnter * ++once
          \ let &shell='/bin/bash -i'
  endif
augroup end

runtime! ftplugin/man.vim
if ! has('nvim')
  packadd! matchit
  packadd! termdebug
endif

filetype plugin on                   " use filetype plugin
filetype on
filetype indent on                   " use indent plugin
set keywordprg=:Man

let $PAGER=''                        " vim as pager

syntax on
set encoding=utf-8                   " character encoding
scriptencoding utf8
set ttyfast                          " faster redrawing
set nolazyredraw                     " no redraw executing macros
set tags=tags,.git/tags


"""        Restore

" Session restore
if has('mksession')
  set sessionoptions-=options
  set sessionoptions-=curdir
  set viewoptions=folds,cursor       "only these settings
endif
" restore undo history
if exists('+undofile')
  set undofile
endif

set history=10000                    " long history
set hidden

if exists('$SUDO_USER')              " don't create root-owned files
  set noswapfile
  set nobackup
  set nowritebackup
  set noundofile
  set viminfo=
else
  set backupdir=$HOME/.vim/tmp/backup//
  set directory=$HOME/.vim/tmp/swap//
  set undodir=$HOME/.vim/tmp/undo//
  set viewdir=$HOME/.vim/tmp/view//
  if has('nvim')
    set viminfo+=n$HOME/.vim/tmp/viminfo/nviminfo
  else
    set viminfo+=n$HOME/.vim/tmp/viminfo/viminfo
  endif
endif

if !isdirectory(&backupdir) | call mkdir(&backupdir, 'p') | endif
if !isdirectory(&directory) | call mkdir(&directory, 'p') | endif
if !isdirectory(&undodir) | call mkdir(&undodir, 'p') | endif
if !isdirectory(&viewdir) | call mkdir(&viewdir, 'p') | endif
if !isdirectory($HOME.'/.vim/tmp/viminfo/') | call mkdir($HOME.'/.vim/tmp/viminfo/', 'p') | endif

set autoread                    " auto load file changes
set autowriteall                " auto save file changes
set modelineexpr                " flexible modeline set

"""        User Interface settings

" Title
if has('title')
  set title                       " window title (file)
  set titleold=
endif

" Mappings chill
let mapleader=' '
set notimeout                   " no timeout on maps
set ttimeout                    " timeout on keycodes
set ttimeoutlen=10              " of 10 ms
set mouse=a                     " it's a secret

if ! has('nvim')
  set ttymouse=xterm2             " allow mouse in tmux
endif

" search
set magic                       " set magic on, for regex
set ignorecase                  " case insensitive search
set smartcase                   " case-sens if cap
if has('extra_search')
  set hlsearch                    " highlight all searches
  set incsearch                   " highlight match while typing
endif
" set path+=**                  " recursive path from current path
" ignore some files from wildcard expansion
set nrformats-=octal            " <c-a>/<c-x> do not use octals

if has('wildignore')
  set wildignore+=**/__pycache__/**
  set wildignore+=**/venv/**
  set wildignore+=**/node_modules/**
  set wildignore+=**/dist/**
  set wildignore+=**/build/**
  set wildignore+=*.o
  set wildignore+=*.pyc
  set wildignore+=*.swp
endif

" Command line window
set cmdheight=2                 " Command-line height
if has('cmdline_info')
  set showcmd                     " show command
  set ruler                       " show cursor line / column
endif
if has('wildmenu')
  set wildmenu                    " show matches to commands
endif
set wildchar=<tab>              " complete w/ tab
set wildmode=longest,full
set fileignorecase              " ignore case using filename
set wildignorecase              " ignore case completing filenames

" status line
set laststatus=2                " always show satus line
set noshowmode

" Shortmess : 'hit enter' prompt custzomization
set shortmess+=A                " Always edit if swap exists
set shortmess+=f                " Abbrev file count
set shortmess+=i                " Abbrev line without end
set shortmess+=l                " Abbrev line and word count
set shortmess+=m                " Abbrev modified
set shortmess+=n                " Abbrev new file
set shortmess+=r                " Abbrev read only
set shortmess+=w                " Abbrev writter
set shortmess+=x                " Abbrev dos and mac format
set shortmess+=W                " No message when writing
set shortmess+=F                " As if silent autocomands
set shortmess+=c                " No ins completion message
set shortmess+=s                " No 'search hit BOTTOM' message

" insert complete menu
set completeopt+=longest        " complete matching string
set completeopt+=menuone        " pmenu on single match too

" Bell
set visualbell                  " do not ring the bell
set noerrorbells                " no bell for error messages
set t_vb=                       " no bell at all

" tabulation control
set noexpandtab                 " tabs ftw
set smarttab                    " tab width start of line
set tabstop=4                   " visible width of tabs
set softtabstop=4               " tabs 4 characters wide
set shiftwidth=4                " indents 4 characters wide
set shiftround                  " indent congru shiftwidth
set autoindent                  " automatically indent new line
if has('smartindent')
  set smartindent               " ... in a sane way
endif
if has('linebreak')
  set showbreak=>\              " ... showing a character
  set breakindent               " with indent
endif
set wrap                        " wrap lines

" splits
set switchbuf=usetab            " open buffer window if exists
set splitbelow                  " default split below
set splitright                  " default split right
" set list

" guides smartisation
set listchars=tab:\▎\ ,trail:-  " only tab / trailing ws
set spellcapcheck=              " ignore leading cap in word
set nojoinspaces                " and spaces too
if v:version > 703 || v:version == 203 && has('patch541')
  set formatoptions+=j            " join comments smartly
endif
set formatoptions-=cro          " no auto comment line

" Main window
set display+=lastline           " show lastline even if too long

if ! has('nvim')
  augroup TermOpt
    au!
    au TerminalWinOpen * setlocal nonumber signcolumn=no
  augroup END
endif

set number                      " show number column
set signcolumn=yes              " at least for now, I'm ok with old behaviour

" Moves boundaries
if has('conceal')
  set conceallevel=0
endif
set backspace=indent,eol,start  " backspace over lines
set whichwrap+=<,>,h,l,[,]      " break cursor free
set virtualedit=block           " visual selection broken free
set nostartofline               " vertical moves in same column
set sidescrolloff=5             " min horizontal cursor offset
set sidescroll=1                " min horizontal cursor offset
augroup SetScrolloff            " min vertical cursor offset
  au!
  au BufRead,BufEnter *
        \ let &l:scrolloff = winheight(winnr())/10 + 1
augroup end
" set iskeyword+=,                " considered part of <cword>
set iskeyword+=-                " considered part of <cword>

" Folding
if has('folding')
  if has('windows')
    set fillchars+=vert:▎
  endif
  set foldmethod=syntax           " fold based on indent
  set foldnestmax=2               " deepest fold is 10 levels
  set nofoldenable                " don't fold by default
endif

" Colors
let base16colorspace=256        " access 256 colorspace
set t_Co=256                    " say terminal supports 256
if has('termguicolors')
  set termguicolors             " 24 bits colors
endif

" Diff
if has('diff')
  set diffopt+=vertical           " vertical split for diff
endif

" set cursorline                  " for CursorLineNr

" Tabline
set tabpagemax=30

""    Plugins settings
"""        Pathogen Helptags

command! -bar Helptags :call pathogen#helptags()

"""        Termdebug

" let g:termdebug_wide = 163
let g:termdebug_wide = 40

"""        Vim-run
let g:vim_run_command_map = {
      \'javascript': 'node',
      \'php': 'php',
      \'python': 'python',
      \'markdown': 'markdown',
      \}

"""        Iris

let g:iris_name  = 'Tristan Kapous'
let g:iris_mail = 'tris@tristankapous.com'

" IMAP (required)
let g:iris_imap_host  = 'ssl0.ovh.net'
" let g:iris_imap_host = "imaps://tris@tristankapous.com@ssl0.ovh.net"
let g:iris_imap_port  = 993
" let g:iris_imap_login = "Your IMAP login" "Default to g:iris_mail

" SMTP (req(uir)ed)
" let g:iris_smtp_host  = "your.smtp.host" "Default to g:iris_imap_host
" let g:iris_stmp_host = "smtps://tris@tristankapous.com@ssl0.ovh.net"
let g:iris_smtp_port  = 465
" let g:iris_smtp_login = "Your IMAP login" "Default to g:iris_mail

" let g:iris_imap_passwd_filepath = "iris.imap.gpg"
" let g:iris_smtp_passwd_filepath = "iris.smtp.gpg"

"""        Coc

"TODO: make it work, and move all config here

" augroup CocConfig
"   " this one is which you're most likely to use?
"   au VimEnter * call CocConfig()
" augroup end

" function CocConfig() abort
"   call coc#config('languageserver', {
"         \ 'groovy': {
"         \   "args": ["-jar", "/home/tris/dotfiles/langserver/groovy-language-server/build/libs/groovy-language-server.jar"],
"         \ },
"         \ 'efm': {
"         \   "args": ["-c", "/home/tris/dotfiles/langserver/efm-langserver/config.yaml"]
"         \ }
"         \})
" endfunction

" let g:coc_user_config = {
"       \ "languageserver.groovy.args": ["-jar", "/home/tris/dotfiles/langserver/groovy-language-server/build/libs/groovy-language-server.jar"],
"       \ "languageserver.efm.args": ["-c", "/home/tris/dotfiles/langserver/efm-langserver/config.yaml"]
"       \ }

""    Vimrc modeline
" vim:expandtab
" vim:tw=0:ts=2:sts=2:shiftwidth=2
" vim:foldmethod=expr:foldtext=VimFold()
" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-1)\:'='
