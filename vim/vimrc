" **************************************************************************** "
"                                                                              "
"                                                         :::      ::::::::    "
"    vimrc                                              :+:      :+:    :+:    "
"                                                     +:+ +:+         +:+      "
"    By: biggybi <biggybi@protonmail.com>           +#+  +:+       +#+         "
"                                                 +#+#+#+#+#+   +#+            "
"    Created: 2016/04/14 18:58:30 by tris              #+#    #+#              "
"    Updated: 2021/09/25 19:36:22 by tris             ###   ########lyon.fr    "
"                                                                              "
" **************************************************************************** "

""    General settings

runtime! ftplugin/man.vim
if ! has('nvim')
  packadd! matchit
  packadd! termdebug
endif

" allow clipboard when starting with '-X'
if has('X11') && has('clientserver')
  call serverlist()
endif

filetype on                     " use filetype detection
filetype plugin on              " use filetype plugin
filetype indent on              " use indent plugin
set keywordprg=:Man

" use bash aliases
let $BASH_ENV = '$HOME/dotfiles/shells/bash/bash_aliases'

" allow :Man
let $PAGER=''
let $MANPAGER=''

syntax on
set encoding=utf-8              " character encoding
scriptencoding utf8
set ttyfast                     " faster redrawing
set nolazyredraw                " no redraw executing macros
set tags=tags,.git/tags

" Mappings chill
let mapleader=' '
set notimeout                   " no timeout on maps
set ttimeout                    " timeout on keycodes
set ttimeoutlen=10              " of 10 ms
set mouse=a                     " it's a secret

if ! has('nvim') && exists('&ttymouse')
  set ttymouse=xterm2           " allow mouse in tmux
endif

" Bell off
set visualbell                  " do not ring the bell
set noerrorbells                " no bell for error messages
set t_vb=                       " no bell at all

" Splits / Buffers
set switchbuf=usetab            " open buffer window if exists
set splitbelow                  " default split below
set splitright                  " default split right

" workaround for makefile error: fix wrong file entry
set errorformat^=%Amake:\ ***\ [%f:%l:\ %.%#]%m

""    UI
" Insert mode completion menu
set completeopt+=longest        " complete matching string
set completeopt+=menuone        " pmenu on single match too

" Indent
set noexpandtab                 " tabs ftw
set smarttab                    " tab width start of line
set tabstop=4                   " visible width of tabs
set softtabstop=4               " tabs 4 characters wide
set shiftwidth=4                " indents 4 characters wide
set shiftround                  " indent congru shiftwidth
set autoindent                  " automatically indent new line
if has('smartindent')
  set smartindent               " ... in a sane way
endif

" Folds
if has('folding')
  if has('windows')
    set fillchars+=vert:│       " window separator
  endif
  set foldmethod=syntax         " fold based on indent
  set foldnestmax=2             " deepest fold is 10 levels
  set nofoldenable              " don't fold by default
endif

" Diffs
if has('diff')
  set diffopt+=vertical         " vertical split for diff
endif

" Title
if has('title')
  set title                     " window title (file)
  set titleold=
endif

" Statusline / Tabline
set laststatus=2                " always show satus line
set showtabline=2
set noshowmode
set tabpagemax=30

""    Style
" Window
if exists('&cursorline')
  set cursorline                " for CursorLineNr
endif
set number                      " show number column
if exists('&signcolumn')
  set signcolumn=number
endif
set wrap                        " wrap lines
if has('linebreak')
  set showbreak=>\              " ... showing a character
  set breakindent               " with indent
endif

" Display
if exists('&conceal')
  set conceallevel=0            " show concealed characters
endif
set display+=lastline           " show lastline even if too long

" Color
if has('termguicolors')
  set termguicolors             " 24 bits colors
endif

""    Search
set magic                       " set magic on, for regex
set ignorecase                  " case insensitive search
set smartcase                   " case-sens if cap
if has('extra_search')
  set hlsearch                  " highlight all searches
  set incsearch                 " highlight match while typing
endif
"        set path+=**                  " recursive path from current path
set nrformats=hex               " <c-a>/<c-x> do not use octals

if has('wildignore')
  set wildignore+=**/__pycache__/**
  set wildignore+=**/venv/**
  set wildignore+=**/node_modules/**
  set wildignore+=**/dist/**
  set wildignore+=**/build/**
  set wildignore+=*.o
  set wildignore+=*.pyc
  set wildignore+=*.swp
endif

""    Command line
set cmdheight=2                 " Command-line height
if has('cmdline_info')
  set showcmd                   " show command
  set ruler                     " show cursor line / column
endif
if has('wildmenu')
  set wildmenu                  " show matches to commands
endif
if has("patch4417") || v:version >= 900
  " NOTE: has('wildoptions') -> never true?
  set wildoptions=pum           " vertical command-mode completion list
endif
set wildchar=<tab>              " complete w/ tab
set wildmode=longest:full,full
set fileignorecase              " ignore case using filename
set wildignorecase              " ignore case completing filenames

" Shortmess : 'hit enter' prompt custzomization
set shortmess+=A                " Always edit if swap exists
set shortmess+=f                " Abbrev file count
set shortmess+=i                " Abbrev line without end
set shortmess+=l                " Abbrev line and word count
set shortmess+=m                " Abbrev modified
set shortmess+=n                " Abbrev new file
set shortmess+=r                " Abbrev read only
set shortmess+=w                " Abbrev writter
set shortmess+=x                " Abbrev dos and mac format
set shortmess+=W                " No message when writing
set shortmess+=F                " As if silent autocomands
set shortmess+=c                " No ins completion message
set shortmess+=s                " No 'search hit BOTTOM' message

""    Text
" Move boundaries
set backspace=indent,eol,start  " backspace over lines
set whichwrap+=<,>,h,l,[,]      " break cursor free
set iskeyword+=-                " '-' considered part of <word>
set virtualedit=block           " visual selection broken free
set nostartofline               " vertical moves in same column
if exists('&spellcapcheck')
  set spellcapcheck=            " caps don't start sentences
endif

" Scroll
set sidescrolloff=5             " min horizontal cursor offset
set sidescroll=1                " min horizontal cursor offset
augroup SetScrolloff            " min vertical cursor offset
  au!
  au BufRead,BufEnter,WinEnter *
        \ let &l:scrolloff = winheight(winnr())/10 + 1
augroup end

" Join
set nojoinspaces                " join with only one space
augroup FormatOptions
  au!
  " join / append line without comment
  au BufEnter * setlocal formatoptions=ql
        \|if v:version > 703 || (v:version == 203 && has('patch541'))
          \| setlocal formatoptions+=j | endif
augroup end
set listchars=tab:\▎\ ,trail:-  " only tab / trailing ws


""    Save / Restore

" Session restore
if has('mksession')
  set sessionoptions-=options
  set sessionoptions-=curdir
  set viewoptions=folds,cursor  " only these settings
endif

set history=10000               " long history
set hidden

set autoread                    " auto load file changes
set autowriteall                " auto save file changes
set modelineexpr                " flexible modeline set

" restore undo history
if exists('+undofile')
  set undofile
endif

if exists('$SUDO_USER')         " don't create root-owned files
  set noswapfile
  set nobackup
  set nowritebackup
  set noundofile
  set viminfo=
elseif has('nvim')
  set viminfo+=n$HOME/.nvim/tmp/viminfo/nviminfo
  set backupdir=$HOME/.nvim/tmp/backup//
  set directory=$HOME/.nvim/tmp/swap//
  set undodir=$HOME/.nvim/tmp/undo//
  set viewdir=$HOME/.nvim/tmp/view//
else
  set viminfo+=n$HOME/.vim/tmp/viminfo/viminfo
  set backupdir=$HOME/.vim/tmp/backup//
  set directory=$HOME/.vim/tmp/swap//
  set undodir=$HOME/.vim/tmp/undo//
  set viewdir=$HOME/.vim/tmp/view//
endif

for d in [ &backupdir, &directory, &undodir, &viewdir, $HOME.'/.vim/tmp/viminfo/' ]
  if !isdirectory(d) | call mkdir(d, 'p') | endif
endfor

""    Extras
let g:termdebug_wide = 40

" Vim-run
let g:vim_run_command_map = {
      \'javascript': 'node',
      \'php': 'php',
      \'python': 'python',
      \'markdown': 'markdown',
      \}

""    Vimrc modeline
" vim:expandtab
" vim:tw=0:ts=2:sts=2:shiftwidth=2
" vim:foldmethod=expr:foldtext=VimFold()
" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-1)\:'='
