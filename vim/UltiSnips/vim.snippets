# Multi-inclusion protection
snippet plug_guards "Multi-inclusion protection" b
if exists('g:plugin_`!v expand("%:t:r")`')
  finish
endif
let g:plugin_`!v expand("%:t:r")` = 1
${4}
endsnippet

# Titlelize in the Transformation
snippet title "Titlelize in the Transformation"
${1:a text}
${1/\w+\s*/\\u$0/g}
${2}
endsnippet

# Create plugin <plug> mappings and commands
snippet plug_map "Create plugin <plug> mappings and commands" b!
command! ${1:Name} :call s:${1/\w+\s*/\l$0/}  ()
nnoremap <expr> <plug>`!p snip.rv = t[1]` <sid>${1/\w+\s*/\l$0/}()
if !hasmapto('<plug>`!p snip.rv = t[1]`') && maparg('`!p snip.rv = t[3]`', '${2:mode}') ==# ''
  `!p snip.rv = t[2]`map ${3:mapping} <plug>`!p snip.rv = t[1]`
endif
${4}
endsnippet

# Create plugin <plug> mappings and commands
snippet letg "get global variable with default value" b!
let g:${1:var_name} = get(g:, '`!p snip.rv = t[1]`', '${2}')
${3}
endsnippet

# Quick echo
snippet echo "echo message"
echo "${1:test}"
endsnippet

# Quick echom
snippet echom "echo message"
echom "${1:test}"
endsnippet

# Sections for modeline
snippet sectionsub "top level comment" b
"""        ${1}
endsnippet

# Sections for modeline
snippet section "lower level comment" b
""    ${1}
endsnippet

snippet catch "catch specific error" b
catch /^Vim\%((\a\+)\)\=:${1:E123}:/
endsnippet

snippet catcha "catch any error" b
catch /.*/
endsnippet

# todoc
snippet todoc "todo with line comment" b!
`!v GetCommentMarker()`TODO: ${1}
endsnippet

# todob
snippet todob "todo with block comment" b!
`!v GetBlockCommentMarks()[0]`TODO: ${1}`!v GetBlockCommentMarks()[1]`
endsnippet
